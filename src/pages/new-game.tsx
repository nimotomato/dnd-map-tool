import Link from "next/link";
import Head from "next/head";
import React, {
  MouseEvent as ReactMouseEvent,
  useEffect,
  useRef,
  useState,
} from "react";
import { api } from "~/utils/api";

import DungeonMap from "~/components/DungeonMap";
import useGetMapRect from "../hooks/useGetMapRect";

type Maprect = {
  x: number;
  y: number;
  width: number;
  height: number;
  fullWidth: number;
  fullHeight: number;
};

const NewGame = () => {
  // MAP STUFF
  // TO DO: condense states into obj
  const [map, setMap] = useState(
    `https://i.pinimg.com/originals/9a/03/a8/9a03a864580616f502f17e78e5181b7f.jpg`
  );
  const [mapPosX, setMapPosX] = useState(0);
  const [mapPosY, setMapPosY] = useState(0);
  const [mapZoom, setMapZoom] = useState(6);
  const [hasLoaded, setHasLoaded] = useState(false);
  const mapRef = useRef<HTMLDivElement | null>(null);
  const mapRect = useGetMapRect(map, mapRef);

  // PLAYER STUFF
  const [players, setPlayers] = useState<string[]>([]);
  const [input, setInput] = useState("");
  const [border, setBorder] = useState({
    color: "border-black",
    size: "border",
  });
  const [errorText, setErrorText] = useState("");

  // Magic API
  const getUser = api.user.getAll.useQuery({ userName: input });

  const handleOnAddPlayer = (e: ReactMouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    if (
      !getUser.data ||
      getUser.data.length === 0 ||
      // Verify username exists in database
      players.includes(getUser.data[0]?.name as string)
    ) {
      setBorder({ color: "border-rose-500", size: "border-2" });
      setErrorText("Username not found, try again.");
      return;
    }

    setPlayers((prev) => [...prev, input]);
    setBorder({ color: "border-black", size: "border-2" });
    setErrorText("");
    setInput("");
  };

  const handleOnAddMap = (e: ReactMouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
  };

  const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInput(e.target.value);
  };

  const handleOnRemove = (
    e: ReactMouseEvent<HTMLButtonElement>,
    player: string
  ) => {
    e.preventDefault();
    setPlayers((prev) => {
      return prev.filter((name) => name !== player);
    });
  };

  return (
    <>
      <Head>
        <title>DND map</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col  items-center justify-center bg-slate-600">
        <h1>Starting?</h1>
        <form>
          <label>Select map</label>
          <div className="m-6">
            <DungeonMap
              key={JSON.stringify(mapRect)}
              mapRef={mapRef}
              mapRect={mapRect}
              map={map}
              mapPosX={mapPosX}
              setMapPosX={setMapPosX}
              setMapPosY={setMapPosY}
              mapPosY={mapPosY}
              mapZoom={mapZoom}
              hasLoaded={hasLoaded}
              setHasLoaded={setHasLoaded}
            />
          </div>
          <button onClick={handleOnAddMap}>Add player</button>
          <input
            type="text"
            id="map"
            name="map"
            placeholder="Enter image url"
          ></input>
          <br></br>
          <label>Invite players</label>
          <div>
            {players.length > 0 &&
              players.map((player) => {
                return (
                  <div key={players.indexOf(player)}>
                    <p>
                      Player {`${players.indexOf(player) + 1}`} {player}
                    </p>
                    <button onClick={(e) => handleOnRemove(e, player)}>
                      Remove player
                    </button>
                  </div>
                );
              })}
            <input
              type="text"
              className={`${border.size} ${border.color}`}
              value={input}
              onChange={handleOnChange}
            ></input>
            {errorText && <p>{errorText}</p>}

            <button onClick={handleOnAddPlayer}>Add player</button>
          </div>

          {/* <ul>
            <li>Invite players</li>
            <li>Place characters</li>
            <li>Start game</li>
          </ul> */}
        </form>
        <button>Add NPCs</button>
        <Link href="/">Go back</Link>
      </main>
    </>
  );
};

export default NewGame;
