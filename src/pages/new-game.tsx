import Link from "next/link";
import Head from "next/head";
import React, { MouseEvent as ReactMouseEvent, useRef, useState } from "react";
import { api } from "~/utils/api";

import DungeonMap from "~/components/DungeonMap";
import Sprite from "../components/Sprite";
import useGetMapRect from "../hooks/useGetMapRect";
import useTryLoadImg from "~/hooks/useTryLoadImg";

import { Spriteinfo, MapProps } from "~/types";

const defaultMap = "/img/dungeonmap.jpg";

const NewGame = () => {
  // ZOOM STUFF
  const sizeMultiplierRef = useRef(1.5);
  const sizeMultiplication = (value: number) => {
    return value * sizeMultiplierRef.current;
  };

  // MAP STUFF
  const [map, setMap] = useState<MapProps>({
    imgSrc: defaultMap,
    posX: 0,
    posY: 0,
    height: 25,
    width: 25,
    zoom: 6,
    hasLoaded: false,
  });

  const mapRef = useRef<HTMLDivElement | null>(null);
  const mapRect = useGetMapRect(map.imgSrc, mapRef);

  const handleOnAddMap = (e: ReactMouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    setMapInput("");
    setMap((prev) => ({ ...prev, imgSrc: mapInput }));
  };

  const handleOnMapChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setMapInput(e.target.value);
  };

  // PLAYER STUFF
  const [players, setPlayers] = useState<string[]>([]);
  const [playerInput, setPlayerInput] = useState("");
  const [mapInput, setMapInput] = useState("");
  const [border, setBorder] = useState({
    color: "border-black",
    size: "border",
  });
  const [errorText, setErrorText] = useState("");

  // Magic API
  const getUser = api.user.getAll.useQuery({ userName: playerInput });

  const handleOnAddPlayer = (e: ReactMouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    if (
      !getUser.data ||
      getUser.data.length === 0 ||
      // Verify username exists in database
      players.includes(getUser.data[0]?.name as string)
    ) {
      setBorder({ color: "border-rose-500", size: "border-2" });
      setErrorText("Username not found, try again.");
      return;
    }

    setPlayers((prev) => [...prev, playerInput]);
    setBorder({ color: "border-black", size: "border-2" });
    setErrorText("");
    setPlayerInput("");
  };

  const handleOnPlayerChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setPlayerInput(e.target.value);
  };

  const handleOnRemove = (
    e: ReactMouseEvent<HTMLButtonElement>,
    player: string
  ) => {
    e.preventDefault();
    setPlayers((prev) => {
      return prev.filter((name) => name !== player);
    });
  };

  // STEP STUFF
  const [step, setStep] = useState(1);

  const handleNextStep = (e: ReactMouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    setStep(2);
    setMap((prev) => ({
      ...prev,
      width: sizeMultiplication(prev.width),
      height: sizeMultiplication(prev.height),
    }));
  };

  // SPRITE STUFF
  const [sprites, setSprites] = useState<Array<Spriteinfo>>([]);
  const [NPCNameInput, setNPCNameInput] = useState("");
  const [NPCSrcInput, setNPCSrcInput] = useState("");
  const defaultSpriteSizeRef = useRef(2.5);

  // has error might not work
  const hasError = useTryLoadImg(NPCSrcInput);

  const handleOnChangeNPCSrc = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNPCSrcInput(e.target.value);
  };

  const handleOnChangeNPCName = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNPCNameInput(e.target.value);
  };

  const handleOnLoadNPC = (e: ReactMouseEvent<HTMLButtonElement>) => {
    e.preventDefault();

    const newSprite: Spriteinfo = {
      name: `${NPCNameInput}`,
      posX: 0,
      posY: 0,
      height: sizeMultiplication(defaultSpriteSizeRef.current),
      width: sizeMultiplication(defaultSpriteSizeRef.current),
      imgSrc: `${NPCSrcInput}`,
      controller: "dm",
    };

    setSprites((prev) => [...prev, newSprite]);
  };

  return (
    <>
      <Head>
        <title>DND map</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-slate-600">
        {step === 1 && (
          <>
            <h1>Create new game!</h1>
            <form>
              <label>Select map</label>
              <input
                placeholder="img url here"
                onChange={handleOnMapChange}
                value={mapInput}
              ></input>
              <button onClick={handleOnAddMap}>Fetch</button>
              <div className="m-6">
                <DungeonMap
                  key={JSON.stringify(mapRect)}
                  mapRef={mapRef}
                  mapRect={mapRect}
                  map={map}
                  setMap={setMap}
                />
              </div>
              <br></br>
              <label>Invite players</label>
              <div>
                {players.length > 0 &&
                  players.map((player) => {
                    return (
                      <div key={players.indexOf(player)}>
                        <p>
                          Player {`${players.indexOf(player) + 1}`} {player}
                        </p>
                        <button onClick={(e) => handleOnRemove(e, player)}>
                          Remove player
                        </button>
                      </div>
                    );
                  })}
                <input
                  type="text"
                  className={`${border.size} ${border.color}`}
                  value={playerInput}
                  onChange={handleOnPlayerChange}
                ></input>
                {errorText && <p>{errorText}</p>}
                <button onClick={handleOnAddPlayer}>Add player</button>
              </div>
            </form>
            <div className="flex space-x-1">
              <Link href="/">Go back</Link>
              <button onClick={handleNextStep}>Next step</button>
            </div>
          </>
        )}
        {step === 2 && (
          <>
            <div>NPC planner</div>
            <div className="m-6">
              <DungeonMap
                key={JSON.stringify(mapRect)}
                sprites={sprites}
                setSprites={setSprites}
                mapRef={mapRef}
                mapRect={mapRect}
                map={map}
                setMap={setMap}
              />
            </div>
            <form>
              <input onChange={handleOnChangeNPCName} placeholder="NPC name" />

              <input onChange={handleOnChangeNPCSrc} placeholder="img url" />
              <button onClick={handleOnLoadNPC}>Load NPC</button>
            </form>
          </>
        )}
      </main>
    </>
  );
};

export default NewGame;
