generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Game {
    gameId          String            @id
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    name            String
    mapSrc          String            @db.Text
    mapPosX         Decimal
    mapPosY         Decimal
    isPaused        Boolean
    dungeonMasterId String
    mapZoom         Int
    spriteSize      Int
    dungeonMaster   User              @relation(fields: [dungeonMasterId], references: [id])
    CharacterInGame CharacterInGame[]
    UserInGame      UserInGame[]
}

model Character {
    characterId     String            @id
    name            String
    imgSrc          String            @db.Text
    controllerId    String
    controller      User              @relation(fields: [controllerId], references: [id], onDelete: Cascade)
    CharacterInGame CharacterInGame[]
}

model CharacterInGame {
    gameId      String
    characterId String
    initiative  Int
    positionX   Decimal
    positionY   Decimal
    Character   Character @relation(fields: [characterId], references: [characterId])
    Game        Game      @relation(fields: [gameId], references: [gameId], onDelete: Cascade)

    @@id([gameId, characterId])
}

model UserInGame {
    gameId String
    userId String
    Game   Game   @relation(fields: [gameId], references: [gameId], onDelete: Cascade)
    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([gameId, userId])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Character     Character[]
    UserInGame    UserInGame[]
    Game          Game[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
